'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = promisePoller;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _strategies = require('./strategies');

var _strategies2 = _interopRequireDefault(_strategies);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug2.default)('promisePoller');

var DEFAULTS = {
  strategy: 'fixed-interval',
  retries: 5,
  shouldContinue: function shouldContinue(err) {
    return !!err;
  }
};

var pollerCount = 0;

function promisePoller() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (typeof options.taskFn !== 'function') {
    throw new Error('No taskFn function specified in options');
  }

  Object.keys(DEFAULTS).forEach(function (option) {
    return options[option] = options[option] || DEFAULTS[option];
  });
  options.name = options.name || 'Poller-' + pollerCount++;
  debug('Creating a promise poller "' + options.name + '" with interval=' + options.interval + ', retries=' + options.retries);

  if (!_strategies2.default[options.strategy]) {
    throw new Error('Invalid strategy "' + options.strategy + '". Valid strategies are ' + Object.keys(_strategies2.default));
  }
  var strategy = _strategies2.default[options.strategy];
  debug('(' + options.name + ') Using strategy "' + options.strategy + '".');
  var strategyDefaults = strategy.defaults;
  Object.keys(strategyDefaults).forEach(function (option) {
    return options[option] = options[option] || strategyDefaults[option];
  });

  debug('(' + options.name + ') Options:');
  Object.keys(options).forEach(function (option) {
    debug('    "' + option + '": ' + options[option]);
  });

  return new _bluebird2.default(function (resolve, reject) {
    var polling = true;
    var retriesRemaining = options.retries;
    var rejections = [];
    var timeoutId = null;

    if (options.masterTimeout) {
      debug('(' + options.name + ') Using master timeout of ' + options.masterTimeout + ' ms.');
      timeoutId = setTimeout(function () {
        debug('(' + options.name + ') Master timeout reached. Rejecting master promise.');
        polling = false;
        reject('master timeout');
      }, options.masterTimeout);
    }

    function poll() {
      var task = options.taskFn();

      if (task === false) {
        task = _bluebird2.default.reject('Cancelled');
        debug('(' + options.name + ') Task function returned false, canceling.');
        reject(rejections);
        polling = false;
      }

      var taskPromise = _bluebird2.default.resolve(task);

      if (options.timeout) {
        taskPromise = taskPromise.timeout(options.timeout);
      }

      taskPromise.then(function (result) {
        debug('(' + options.name + ') Poll succeeded. Resolving master promise.');

        if (options.shouldContinue(null, result)) {
          debug('(' + options.name + ') shouldContinue returned true. Retrying.');
          var nextInterval = strategy.getNextInterval(options.retries - retriesRemaining, options);
          debug('(' + options.name + ') Waiting ' + nextInterval + 'ms to try again.');
          _bluebird2.default.delay(nextInterval).then(poll);
        } else {
          if (timeoutId !== null) {
            clearTimeout(timeoutId);
          }
          resolve(result);
        }
      }, function (err) {
        rejections.push(err);
        if (typeof options.progressCallback === 'function') {
          options.progressCallback(retriesRemaining, err);
        }

        if (! --retriesRemaining || !options.shouldContinue(err)) {
          debug('(' + options.name + ') Maximum retries reached. Rejecting master promise.');
          reject(rejections);
        } else if (polling) {
          debug('(' + options.name + ') Poll failed. ' + retriesRemaining + ' retries remaining.');

          var nextInterval = strategy.getNextInterval(options.retries - retriesRemaining, options);

          debug('(' + options.name + ') Waiting ' + nextInterval + 'ms to try again.');
          _bluebird2.default.delay(nextInterval).then(poll);
        }
      });
    }

    poll();
  });
}